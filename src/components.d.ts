/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Column,
} from './components/grid/grid-helpers';
import {
  RowSelectionPattern,
} from './components/grid/row';


export namespace Components {

  interface SuiDisclosure {
    /**
    * Optional override to the button's accessible name (using aria-label)
    */
    'buttonLabel': string;
    /**
    * Optionally set the popup region's accessible name using aria-label (recommended)
    */
    'popupLabel': string;
  }
  interface SuiDisclosureAttributes extends StencilHTMLAttributes {
    /**
    * Optional override to the button's accessible name (using aria-label)
    */
    'buttonLabel'?: string;
    /**
    * Emit a custom close event when the popup closes
    */
    'onClose'?: (event: CustomEvent) => void;
    /**
    * Emit a custom open event when the popup opens
    */
    'onOpen'?: (event: CustomEvent) => void;
    /**
    * Optionally set the popup region's accessible name using aria-label (recommended)
    */
    'popupLabel'?: string;
  }

  interface SuiGrid {
    /**
    * Properties for Usability test case behaviors: *
    */
    'actionsColumn': boolean;
    /**
    * Grid data
    */
    'cells': string[][];
    /**
    * Column definitions
    */
    'columns': Column[];
    /**
    * Caption/description for the grid
    */
    'description': string;
    'editOnClick': boolean;
    'editable': boolean;
    /**
    * Grid type: grids have controlled focus and fancy behavior, tables are simple static content
    */
    'gridType': 'grid' | 'table';
    'headerActionsMenu': boolean;
    /**
    * For virutalized grids and paged grids, used to determine the current row indices of the cells array
    */
    'initialRowIndex': number;
    /**
    * String ID of labelling element
    */
    'labelledBy': string;
    /**
    * Number of rows in one "page": used to compute pageUp/pageDown key behavior, and when paging is used
    */
    'pageLength': number;
    /**
    * Custom function to control the render of cell content
    */
    'renderCustomCell': (content: string, colIndex: number, rowIndex: number) => string | HTMLElement;
    'rowSelection': RowSelectionPattern;
    /**
    * Optional: total rows. Will default to calculating based on cells
    */
    'totalRows': number;
    /**
    * If set to true and the total number of rows is greater than the page length + a buffer, rows will only be rendered to the DOM on demand. If rows are in view without data provided in the `cells` property, they will show as loading
    */
    'virtualized': boolean;
  }
  interface SuiGridAttributes extends StencilHTMLAttributes {
    /**
    * Properties for Usability test case behaviors: *
    */
    'actionsColumn'?: boolean;
    /**
    * Grid data
    */
    'cells'?: string[][];
    /**
    * Column definitions
    */
    'columns'?: Column[];
    /**
    * Caption/description for the grid
    */
    'description'?: string;
    'editOnClick'?: boolean;
    'editable'?: boolean;
    /**
    * Grid type: grids have controlled focus and fancy behavior, tables are simple static content
    */
    'gridType'?: 'grid' | 'table';
    'headerActionsMenu'?: boolean;
    /**
    * For virutalized grids and paged grids, used to determine the current row indices of the cells array
    */
    'initialRowIndex'?: number;
    /**
    * String ID of labelling element
    */
    'labelledBy'?: string;
    /**
    * Emit a custom filter event
    */
    'onFilter'?: (event: CustomEvent) => void;
    /**
    * Emit a page change event
    */
    'onPageChange'?: (event: CustomEvent) => void;
    /**
    * Emit a custom row selection event
    */
    'onRowSelect'?: (event: CustomEvent) => void;
    /**
    * Number of rows in one "page": used to compute pageUp/pageDown key behavior, and when paging is used
    */
    'pageLength'?: number;
    /**
    * Custom function to control the render of cell content
    */
    'renderCustomCell'?: (content: string, colIndex: number, rowIndex: number) => string | HTMLElement;
    'rowSelection'?: RowSelectionPattern;
    /**
    * Optional: total rows. Will default to calculating based on cells
    */
    'totalRows'?: number;
    /**
    * If set to true and the total number of rows is greater than the page length + a buffer, rows will only be rendered to the DOM on demand. If rows are in view without data provided in the `cells` property, they will show as loading
    */
    'virtualized'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SuiDisclosure': Components.SuiDisclosure;
    'SuiGrid': Components.SuiGrid;
  }

  interface StencilIntrinsicElements {
    'sui-disclosure': Components.SuiDisclosureAttributes;
    'sui-grid': Components.SuiGridAttributes;
  }


  interface HTMLSuiDisclosureElement extends Components.SuiDisclosure, HTMLStencilElement {}
  var HTMLSuiDisclosureElement: {
    prototype: HTMLSuiDisclosureElement;
    new (): HTMLSuiDisclosureElement;
  };

  interface HTMLSuiGridElement extends Components.SuiGrid, HTMLStencilElement {}
  var HTMLSuiGridElement: {
    prototype: HTMLSuiGridElement;
    new (): HTMLSuiGridElement;
  };

  interface HTMLElementTagNameMap {
    'sui-disclosure': HTMLSuiDisclosureElement
    'sui-grid': HTMLSuiGridElement
  }

  interface ElementTagNameMap {
    'sui-disclosure': HTMLSuiDisclosureElement;
    'sui-grid': HTMLSuiGridElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
